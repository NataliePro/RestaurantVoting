DROP TABLE user_roles IF EXISTS;
DROP TABLE dishes IF EXISTS;
DROP TABLE votes IF EXISTS;
DROP TABLE restaraunts IF EXISTS;
DROP TABLE users IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE GLOBAL_SEQ
  AS INTEGER
  START WITH 100000;

CREATE TABLE users
(
  id               INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name             VARCHAR(255)            NOT NULL,
  email            VARCHAR(255)            NOT NULL,
  password         VARCHAR(255)            NOT NULL,
  registered       TIMESTAMP DEFAULT now() NOT NULL,
  enabled          BOOLEAN DEFAULT TRUE    NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx
  ON USERS (email);

CREATE TABLE user_roles
(
  user_id INTEGER NOT NULL,
  role    VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE restaraunts
(
  id    INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name  VARCHAR(255) NOT NULL
);

CREATE TABLE votes
(
  id              INTEGER  GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  date            DATE     NOT NULL,
  time            TIME     NOT NULL,
  user_id         INTEGER  NOT NULL,
  restaraunt_id   INTEGER  NOT NULL,
  FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE,
  FOREIGN KEY (restaraunt_id) REFERENCES restaraunts (id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX votes_unique_date_user_id_idx
  ON votes (date, user_id);

CREATE TABLE dishes
(
  id             INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  date           DATE         NOT NULL,
  name           VARCHAR(255) NOT NULL,
  price          INT          NOT NULL,
  restaraunt_id  INTEGER      NOT NULL,
  FOREIGN KEY (restaraunt_id) REFERENCES restaraunts (id) ON DELETE CASCADE
);
CREATE INDEX dishes_restaraunt_date_idx
  ON dishes (restaraunt_id, date)